# Creating an new laravel application
laravel new {application_name}

# Starting laravel application using php
php -S localhost:8080 -t public

# Show database information
php artisan db:show

# Migration, create new database with the code using the database/migration files
php artisan migrate

# Refreshing migrations, applies any changes in the database/migration files, also removes database items
php artisan migrate:refresh

# Executing a migration for a model
php artisan make:migration
create_job_listings_table

After creating a new migration file, we need to set the different attributes 
that our table will have in the migration file itself.

# After making a migration, make sure to apply these migrations
php artisan migrate

This creates a job_listings table for our database.

# Creating a shell for our laravel app
php artisan tinker

Here we can run commands such as:
App\Models\Job::create(['title' => 'Acme Director', 'salary' => '$1,000,000']);
App\Models\Job::all(); // gets all job_listings records
App\Models\Job::find(1); // gets record by their id

# Using eloquent

# Show the settings for the make model
php artisan help make:model

# Creating a model
php artisan make:model Comment 

# Creating a model and then creating a migration for said model
php artisan make:model Post -m

This creates a model but also a corresponding post table migration.
After creating a migration file, we then apply this migration file to our db.

php artisan migrate

# Using UserFactory

# Open tinkerer
php artisan tinker

# Create a User with fake data, make sure the factory has the same attributes as User model
App\Models\User::factory()->create();

This creates random User data and adds the record to the database.

# Creating 100 fake User records.
App\Models\User::factory(100)->create()

# Generating a Factory for our Job model
php artisan make:factory JobFactory

After creating a Factory, make sure that it has use HasFactory; in the class.

# Creating unverified User records
App\Models\User::factory()->unverified()->create()

# Creating model and a factory
php artisan make:model Employer -f

# Creating a model, factory, and a migration
php artisan make:model Tag -mf

# Adding a tag to a job, attaches a tag to a job
$tag->jobs()->attach(App\Models\Job::find(7))

# Run a new query, shows relationships with new records
$tag->jobs()->get()

# Get the title only
$tag->jobs()->get()->pluck("title")

# Disabling lazy loading for less queries
public function boot(): void
{
    // Disabling lazy loading
    Model::preventLazyLoading();
}

# Editing the paginator

# Extracting the markup from the vendor view to the resources view
php artisan vendor:publish

Choose the laravel-pagination, this will generate the files in the resources
folder.

# Populating the database as we reset migrations
php artisan migrate:fresh --seed

# Only running the seeders
php artisan db:seed

# Creating a new seeder class
php artisan make:seeder

# Checking all db:seed options
php artisan help db:seed

# Setting the default seeder class, also runs the seeder class
php artisan db:seed --class=JobSeeder

# Creating a controller
php artisan make:controller

# Showing all existing routes
php artisan route:list

# Showing all routes except for the ones in the vendor folder
php artisan route:list --except-vendor

# Creating a policy
php artisan make:policy